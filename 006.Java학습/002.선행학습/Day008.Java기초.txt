[ Java 기초 ｜ 2021.11.10 ]

배포는 컴파일된 bin 폴더 안에 있는걸 배포한다.
ex) E:\권소현\JAVA\Day8\bin

메인이 있는 클래스를 자바가상머신으로 호출한다.
2가지 방식이 있음 (cmd / 이클립스)

▶ cmd ◀
   C:\Users\권소현>e:
   E:\>cd 권소현
   E:\권소현>cd JAVA
   E:\권소현\JAVA>cd Day8
   E:\권소현\JAVA\Day8>cd bin
   E:\권소현\JAVA\Day8\bin>dir
   E:\권소현\JAVA\Day8\bin>java Ex01_main함수로전달

   ※ 접근방식 설명
      c:\>dir : 디렉토리 폴더
      C:\>cd : 체인지 디렉토리

---------------------------------------------------------------------------------------

▶ 이클립스에서 직접 ◀
   1) 메뉴 "Run" >> "Run Configurations"
   2) 메뉴 탭에서 "(x)= Arguments" 선택
   3) "Program arguments" 에다 적으면 된다. >> 입력 후 Run클릭
    
      ex) 
      ▷ 참고소스 : Day8/src >> Ex01_main함수로전달
      
      ▷ "Program arguments" 칸에 입력내용
         : 동해물과 백두산이 마르고 닳도록 하느님이 보우하사 우리나라 만세 1 10 100
            ▶ 스페이스로 기준으로 구분한다.

            콘솔로 찍어보면
            ▶▶ 매개 변수의 개수 : 11
                 args[0] = 동해물과
                 args[1] = 백두산이
                 args[2] = 마르고
                 args[3] = 닳도록
                 args[4] = 하느님이
                 args[5] = 보우하사
                 args[6] = 우리나라
                 args[7] = 만세
                 args[8] = 1
                 args[9] = 10
                 args[10] = 100

            ▷ 2차원배열 : 면의 개념

________________________________________________________________________


▶▶ int[][] score; >> 자바(오라클)가 권고
     int score[][]; > 비추천
     int[] score[]; > 비추천

________________________________________________________________________


      ▶▶ int[][] score = new int[4][3]; ▶ [행][열]

      ▶ 4행 3열 (칸 하나하나 int타입)
         ----------------------
             │ 0열 │ 1열 │ 2열 │
         ----------------------
         0행 │     │     │     │
         -----------------------
         1행 │     │     │     │
         -----------------------
         2행 │     │     │     │
         -----------------------
         3행 │     │     │     │
         -----------------------
         ->> 0부터 시작


      ▶▶    "score"      →  0 (개당 4byte)    →  0 (int) / 1 (int) / 2 (int)  >> 12byte 
           (레퍼런스변수)      1 (래퍼런스변수)      0 (int) / 1 (int) / 2 (int)  >> 12byte 
            (배열타입)         2                   0 (int) / 1 (int) / 2 (int)   >> 12byte 
             (4byte)          3                   0 (int) / 1 (int) / 2 (int)   >> 12byte 

      
________________________________________________________________________


      ▶▶ String[][] str2D	= new String[][] {{"aaa", "bbb"}, {"AAA", "BBB"}}; 
      ▶   : 2차원 (내부적으로는 3차원)

      ※ 왜 3차원인데?
         "aaa" → 'a' 'a' 'a'            ▶ 1차원 (스트링타입은 개당이 1차원)
         "aaa" "bbb"                    ▶ 2차원
         {"aaa", "bbb"}, {"AAA", "BBB"} ▶ 3차원


________________________________________________________________________


[ 1차원 배열 ]
  ▶ int[]	arr 	= {0, 1, 2, 3, 4};


[ 2차원 배열 ]
  ▶ int[][] arr2D	   = {{11,12}, {21,22}}; 
  ▶ int[][] arr2D 	= new int[2][2];

     ▷ 위와 아래는 사이즈가 같다. 총 16byte 

     다만, 아래 코드인 
     int[][] arr2D 	= new int[2][2]; 
     ▷ 콘솔로 열을 개별로 찍어보면 0으로 나온다.

     위에 코드는 
     열의 각각 숫자를 지정했기때문에
     ▷ 콘솔로 열을 개별로 찍어보면 11, 12, 21, 22 

     ▷▷ 참고소스 : Day8/src >> Ex04_Arrays클래스

________________________________________________________________________


[ Arrays 배열을 찍는 클래스 ]
  
   ▶ Arrays.toString() : 1차원 배열에만 적용 가능 (전체 배열 찍음)
		System.out.println(Arrays.toString(arr));


	▶ Arrays.deepToString() : 2차원, 3차원 .. 가능 (전체 배열 찍음)(재귀여서 가능하다) 자기자신을 또 호출하기 때문에 몇차든 상관없다. (재귀는 함수에만 해당)
		System.out.println(Arrays.deepToString(arr2D));
   	▶▶ int[][]	arr2D	= {{11,12}, {21,22}};
		▶▶ {11,12} 괄호안을 한번 찍고 나와서 다음칸 괄호를 또 찍어준다. {21,22} ▶ deepToString 기능임


   -------------------------------------------------------------------------------------------------------------------------------------------

   ▶ Arrays.equals
   	System.out.println(Arrays.equals(str2D, str2D2)); // false

   ▶ Arrays.deepEquals
		System.out.println(Arrays.deepEquals(str2D, str2D2)); // true 
		▶▶ 2차원, 3차원 .... 에서 찍고 싶으면 "deep"을 적어서 찍으면 된다.(메모리의 스택영역을 많이 쓴다.)

   -------------------------------------------------------------------------------------------------------------------------------------------

   
		// int[] arr	= {0, 1, 2, 3, 4};
		
		// int[] arr2 = arr; // 이건 그대로 복제이기 때문에 메모리 값 같다.
		int[] arr2	= Arrays.copyOf(arr, arr.length); // 갯수만큼 복사해준다. ▶ arr2 : [0, 1, 2, 3, 4] 
		// (메모리를 새로 잡아서 값을 복사한다) 그래서 아래 시스템 찍어보면 완전 같은 메모리 값이 아니라는 것이다.
		System.out.println(arr == arr2);
		
		int[] arr3 	= Arrays.copyOf(arr, 3); // ▶ arr3 : [0, 1, 2]
		int[] arr4 	= Arrays.copyOf(arr, 7); // 4밖에 없으므로 끝은 0 ▶ arr3 : [0, 1, 2, 3, 4, 0, 0]
		
		int[] arr5	= Arrays.copyOfRange(arr, 2, 4); // 범위를 주려면 copyOfRange (맨 뒤는 포함하지 않는다.)
		// (2번째부터 3번째까지) ▶ arr5 : [2, 3]
		int[] arr6	= Arrays.copyOfRange(arr, 0, 7); // (0~6번까지) 4번뒤로는 없어서 0 ▶ arr6 : [0, 1, 2, 3, 4, 0, 0]

   -------------------------------------------------------------------------------------------------------------------------------------------

   	int[] num = {3, 7, 1, 9, 5};
		Arrays.sort(num); // 정렬을 다시 해라. ▶ [1, 3, 5, 7, 9]
		System.out.println(Arrays.toString(num));
		