[ Java 기초 ｜ 2021.11.24 ]

[ 객체를 참조하는 배열 ]
  : ▶ "기본 타입" (byte, char, short, int, long, float, double, boolean) 배열은 각 항목에 → "직접 값" 을 갖고 있지만,
    ▶ "참조 타입" (클래스, 인터페이스) 배열은 각 항목에 → "객체의 번지" 를 가지고 있다.


        ex) 
        String은 클래스 타입 이므로, String[] 배열은 각 항목에 문자열이 아니라 String 객체의 주소를 가진다.

        String[] strArray = new String[3];
        strArray[0] = "Java";
        strArray[1] = "C++";
        strArray[2] = "C#";

        아래와 같이 메모리 영역에 저장된다.

        < String 타입 배열의 스택/힙 저장 방식 >

        ──────────────────────────      ────────────────────────────────────────────────────────────────────────────────
        │       스택 영역         │      │                               힙 영역                                         │
        ──────────────────────────      ────────────────────────────────────────────────────────────────────────────────
        │                        │      │                                                                               │
        │   ───────────────────  │      │                         String 타입 배열 객체                                  │
        │   │  strArray  │    │  │ ------------------------▶    ────────────────────────                               │
        │   ───────────────────  │      │                        │      length : 3      │                               │
        │                        │      │                        │                      │                               │
        │                        │      │                        │     0    1    2      │                               │
        ──────────────────────────      │                        │   ────────────────   │                               │
                                        │                        │   │    │    │    │   │                               │
                                        │                        │   ────────────────   │                               │
                                        │                        ────────────────────────                               │
                                        │                             ↙     ↓     ↘                                   │
                                        │                                                                               │
                                        │        String 객체              String 객체              String 객체           │    
                                        │     ──────────────────      ──────────────────      ──────────────────        │ 
                                        │     │                │      │                │      │                │        │
                                        │     │      Java      │      │      C++       │      │       C#       │        │
                                        │     │                │      │                │      │                │        │
                                        │     ──────────────────      ──────────────────      ──────────────────        │
                                        │                                                                               │
                                        │                                                                               │
                                        ────────────────────────────────────────────────────────────────────────────────


    ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    

    ▶ String[] 배열의 항목도 String 변수와 동일하게 취급되어야 한다.
       따라서, String[] 배열 항목 간에 문자열을 비교할 때는 == 연산자 대신, 
       ▶▶ "equals()" 메소드를 사용해야 한다. ( 배열간의 문자열 비교! )
             ( == 연산자는 객체 번지 비교! )

       ex)
       String[] strArray = new String[3];
       strArray[0] = "Java";
       strArray[1] = "Java";
       strArray[2] = new String("Java");

       System.out.println(strArray[0] == strArray[1]);            // true 출력 : 같은 객체 참조
       ▷▷ System.out.println(strArray[0] == strArray[2]);       // false 출력 : 다른 객체 참조
       ▶▶ System.out.println(strArray[0].equals(strArray[2]));  // true 출력 : 문자열 동일

       위의 코드는 아래와 같이 메모리 영역에 생성된다.


       < String 타입 배열도 String 타입 변수와 같은 동작을 한다. >

        ──────────────────────────      ────────────────────────────────────────────────────────────────────────────────
        │       스택 영역         │      │                               힙 영역                                         │
        ──────────────────────────      ────────────────────────────────────────────────────────────────────────────────
        │                        │      │                                                                               │
        │   ───────────────────  │      │                         String 타입 배열 객체                                  │
        │   │  strArray  │    │  │ ------------------------▶    ────────────────────────                               │
        │   ───────────────────  │      │                        │      length : 3      │                               │
        │                        │      │                        │                      │                               │
        │                        │      │                        │     0    1    2      │                               │
        ──────────────────────────      │                        │   ────────────────   │                               │
                                        │                        │   │    │    │    │   │                               │
                                        │                        │   ────────────────   │                               │
                                        │                        ────────────────────────                               │
                                        │                             ↙    ↙     ↘                                   │
                                        │                                                                               │
                                        │              String 객체                       String 객체                     │    
                                        │           ──────────────────               ──────────────────                 │ 
                                        │           │                │               │                │                 │
                                        │           │      Java      │               │      Java      │                 │
                                        │           │                │               │                │                 │
                                        │           ──────────────────               ──────────────────                 │
                                        │                                                                               │
                                        │                                                                               │
                                        ────────────────────────────────────────────────────────────────────────────────



________________________________________________________________________________________________________________________


[ 배열 복사 ]

  : 배열은 한 번 생성하면 크기를 변경할 수 없기 때문에
    더 많은 저장 공간이 필요하게 되면, 
    ▶ 큰 배열을 새로 만들고, 기존 배열의 항목 값들을 복사해야 한다.

    배열 간의 항목 값을 복사하려면,
    ▶ "for 문" 을 사용하거나 
    ▶ "System.arraycopy()" 메소드를 사용한다.

    ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

    << for 문을 사용한 배열 복사 >>
     
      ex)
      int[] oldIntArray = {1, 2, 3};
      int[] newIntArray = new int[5]; 

      for(int i = 0; i < oldIntArray.length; i++){  ▶ for문으로 배열 복사
              newIntArray[i] = oldIntArray[i];     
      }

      for(int i = 0; i < newIntArray.length; i++){  ▶ 잘 복사 됬나 확인 코드
              System.out.print(newIntArray[i] + ", "); 
      }

      ------------------------------------------------------------------------------------

      [ 코드 풀이 ]
        int[] newIntArray = new int[5]; 
        └ new 연산자로 배열을 처음 생성할 경우, 자동으로 기본값으로 초기화된다.
          타입 int의 초기값은 0이므로 / 5개의 길이에 각각 0의 숫자가 배정
          newIntArray[0] ~ newIntArray[4] 까지 모두 기본값 0으로 초기화 된다.

          oldIntArray 가 3개의 길이만 갖고 있기 때문에
          3개는 복사가 되고, 복사되지 않은 항목의 자리는 배열 기본 초기값 0이 그대로 유지된다.

          newIntArray
          ───────────────────────────────
          │  1  │  2  │  3  │  0  │  0  │
          ───────────────────────────────

    ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


    << System.arraycopy() 메소드를 이용한 배열 복사 >>

      : System.arraycopy() 메소드 호출 방법
        ▶▶ System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length);

             · Object src   : 원본 배열
             · srcPos       : 원본 배열에서 복사할 항목의 시작 인덱스
             · Object dest  : 새로운 배열
             · destPos      : 새로운 배열에 붙여 넣을 시작 인덱스
             · length       : 복사할 항목 개수

      ------------------------------------------------------------------------------------

        ex) ▶   원본 배열(arr1), 새 배열(arr2), ▶ arr1 의 모든 항목을 arr2에 복사하기
            ▶▶  System.arraycopy(arr1, 0, arr2, 0, arr1.length);

      ------------------------------------------------------------------------------------

        ex) System.arraycopy

        String[] oldStrArray = {"java", "array", "copy"};
        String[] newStrArray = new String[5]; 

        System.arraycopy(oldStrArray, 0, newStrArray, 0, oldStrArray.length);

        for(int i = 0; i < newStrArray.length; i++){
                System.out.print(newStrArray[i] + ", ");  // java, array, copy, null, null ▶ 찍힌다. 
        }


        [ 코드풀이 ]
          String[] newStrArray = new String[5]; 
          └ new 연산자로 배열을 처음 생성할 경우, 자동으로 기본값으로 초기화된다.
            타입 String의 초기값은 null이므로 / 5개의 길이에 각각 null로 초기화
            newStrArray[0] ~ newStrArray[4] 까지 모두 기본값 null으로 초기화 된다.

            oldStrArray 가 3개의 길이만 갖고 있기 때문에
            3개는 복사가 되고, 복사되지 않은 항목의 자리는 배열 기본 초기값 null이 그대로 유지된다.



            ─────────────────────────                           ────────────────────────────────────────────────────
            │       │       │       │   ------- 복사 -------▶  │         │         │         │   null   │   null   │
            ─────────────────────────                           ────────────────────────────────────────────────────
               ↙       ↘        ↘                               ↙         ↙         ↙
      String 객체     String 객체     String 객체            옆에 있는      옆에 있는     옆에 있는    
     ─────────────  ─────────────   ─────────────          String 객체   String 객체   String 객체
     │   Java    │  │   array   │   │    copy   │             Java          array         copy
     ─────────────  ─────────────   ─────────────          동일히 참조    동일히 참조   동일히 참조


      ----------------------------------------------------------------------------------------------------------------------


      ▶ 참조 타입 배열 (문자열) 일 경우, 배열 복사가 되면, 복사되는 값(항목의 값)이 객체의 번지이므로
         새 배열의 항목은 이전 배열의 항목이 참조하는 객체와 동일하게 된다. (얕은 복사)

         ▶ 얕은 복사 (shallow copy) : 참조하는 객체가 동일한 복사 (객체 번지 값만 복사)
         ▶ 깊은 복사 (deep copy)    : 참조하는 객체를 별도로 생성하는 복사 (새로운 객체를 따로 생성한다.)
            

________________________________________________________________________________________________________________________


[ 향상된 for 문 ]

  : 반복 실행을 위해 카운터 변수와 증감식을 사용하지 않는다.
    배열 및 컬렉션 항목의 개수만큼 반복하고 자동으로 for문을 빠져 나간다.

      for(타입변수 : 배열) {

            실행문

      } // for문

        ▶ 배열 (가져올 항목이 존재할 경우)  >>  타입변수  >>  실행문  >> 
          배열 (다음 항목이 있는지 검사)  >> 타입변수 >> 실행문 ... (반복)

        ▶ 배열 (가져올 항목이 없는 경우)  >>  for 문 종료

    ------------------------------------------------------------------------------------

    for 문의 괄호() 에는 
    ▶ 배열에서 꺼낸 항목을 저장할 변수 선언, 
    ▶ 콜론(:)
    ▶ 배열
       을 나란히 작성한다.

    for 문이 처음 실행될 때 
    ① "배열" 에서 가져올 첫 번째 값이 존재하는지 검사한다.
    가져올 값이 존재하면, ② "변수" 에 저장한다.
    그리고, ③ "실행문" 을 실행한다.

    실행문을 모두 수행하고 나면,
    다시 ① "배열" 에서 가져올 다음 값이 있는지 검사한다.
    가져올 항목이 없으면 for문은 종료된다. (반복 횟수는 배열의 항목 수가 된다.)

    ------------------------------------------------------------------------------------

    ex)
    int[] scores = {95, 71, 84, 93, 87};

    int sum = 0;
    for(int score : scores) {  // 배열변수가 온다 (저장될변수 : 배열변수) ▶ 배열 scores의 5개 길이 값인 (95, 71, 84, 93, 87) 이 ▷ 각각 int score에 각각 값 들어온다.

          sum = sum + score;

    } 
    System.out.println("점수 총합 = "+sum");

    double avg = (double) sum / scores.length;
    System.out.println("점수 평균 = "+avg");


________________________________________________________________________________________________________________________







