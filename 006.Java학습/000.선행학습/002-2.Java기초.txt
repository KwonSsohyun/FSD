[ Java 기초 ｜ 2021.11.05 ]


[ 반복문 ]

for(), while(), do~while()
_______________________________________________________________________________


[ while 문 ] 
  : ★ do while(조건식); ▶ 유효성검사(제한을 두는것) 
                        : 한번은 실행하고, 두번째,세번째 ... 반복할지 말지 결정할때

  : ★ while(조건식) ▶ for문과 비슷


do{
    조건식이 참인 동안 반복 실행할 문장 1
    조건식이 참인 동안 반복 실행할 문장 2
                ... 
} while(조건식);


▶ do는 조건식이 뒤에 있기때문에
   { } 괄호안에 일단을 들어와서 참인지 거짓인지 판단하고
   거짓이면 일단을 한번은 괄호안을 돈다.
   참이면 계속 돈다. (참일때 반복)

--------------------------------------------------------

while(조건식){
    조건식이 참인 동안 반복 실행할 문장 1
    조건식이 참인 동안 반복 실행할 문장 2
                ...     
}

▶ 트루일때만 반복
   거짓이면 빠져나감.

---------------------------------------------------------
ex) 

    do {
        int score = scan.nextInt();
    }while(score < 60); 

    do안에 생성됬기 때문에
    score은 do안에서만 변수 사용할 수 있기 때문에
    (score < 60); 여기서 비교할 수 없다.(비교할 대상이 없는것)

    ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
    이렇게 수정해야 한다.

    public static void main(String[] args) {
        int score; ▶ 메인함수 나가기 전까지 변수 쓸 수 있음.

        do {
            score = scan.nextInt(); ▶ 여기서는 int score로 선언 안한다. (do 들어오기 전에 선언된 거니까)
        } while(score < 60);

    }

---------------------------------------------------------


[ while() / for() 비교하기 ]

while(int i = 0) 이런식으로 초기값 절대 안된다. XXXXX
while문 바깥에 초기값 줘야함 (와일문 괄호안에 for문 처럼 초기값 못 줌)

int i = 1; ▶ 이런식으로 말이다.
while(i <= 10) {
    i++; ▷ 증감을 맨 처음이나
    System.out.println(i + "번째 반복");
    i++; ▷ 증감을 맨 끝에
}

->> 1번째 반복 밖에 안된다.
    그래서, i++ 증감제어를 와일문안의 제일 처음이나 제일 끝에 한다.

    ▶ 증감이 일정하지 않을때 와일문을 보통 쓴다. / 초기값이 일정하지 않을떄도 씀.


int i;
if( ) i = 1;
else if( ) i = -1;

while(i <= 10) {
    System.out.println(i + "번째 반복");

    if( ) i++;
    else if ( ) i--;
}


반면 for문 한번에 ( ) 괄호안에 다 적으니 편하다.


_______________________________________________________________________________


[ break; 와 continue; 차이 ] 
  : ★반복문을 빠져나간다. 조건제어문은 아니다.
      참고자료 : Day5 >> Ex06구구단

while() {

    if( ) break;

}


▶ break; 만나면 while문 탈출(루프탈출)

---------------------------------

while() {

    if( ) continue;
    ....

}

▶ continue; 루프탈출이 아니라 나머지부분은 스킵하는데,
   다시 와일문으로 올라감. 
   if에 조건이 유지된다면, 계속 루핑이 유지되면서 반복됨.

▷ 코드분석!
   while() 문들어와서
   if( ) continue; 이 컨티뉴를 만나면
   제어문을 빠져나가는게 아니라
   아래 코드들은 실행은 되지 않으나,

   while문 상단으로 다시 올라와서
   if( ) continue; 의 조건이 변하지만 않는다면 계속 제어문 반복 (맴돈다.)


while(true) {

    if( ) continue;

}
보통 테스트 할때 쓴다.

-----------------------------------

do{
    if() break;
} while();

▶ do while문을 쓸경우 continue; break; 쓸건지 고민 안해도됨.
   근데 사실 뒤에 더 코드가 없으면 별반 차이 없다.

▷ continue는 다시 해당제어문 처음으로 돌아가서 계속 반복하는데
   break는 제어문을 아예 나가버리는것이기 때문이다.
   하지만 올라갈 필요없이 브레이크가 효율적이다. 그래야 필요없는 6,7,8,9 가 안도니까
   ▷ 참고자료 : Day5 > Ex05구구단

------------------------------------------

[ ★제어문에서만 "레이블"을 쓸 수 있다. ] 

outer : 
while() {
    while(){

    }
}

Loop1 :  식으로 자기가 짓고 싶은 이름을 붙혀주면 된다. : 만 쓰면 된다.
▷ 참고자료 : Day5 > Ex06구구단2



