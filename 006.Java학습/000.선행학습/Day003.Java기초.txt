[ Java 기초 ｜ 2021.11.03 ]

  [ JDK ]
    Java Development Kit
    - 자바 개발 키트 

  [ JRE ]
    Java Runtime Environment
    - 자바 실행 환경 
      ※ 자바 프로그램을 개발하고자 하는 것이 아니고,
         이미 개발된 프로그램만 실행한다면 JRE만 설치하면 된다.

  [ JVM ]
    Java Virtual Machine
    - 자바 가상 기계 
      : 자바를 실행시키는 가상의 기계
        운영체제와 자바 프로그램을 중계하는 JVM을 두어 자바 프로그램이
        여러 운영체제에서 동일한 실행 결과가 나오도록 설계

        ※ 바이트코드는 모든 JVM에서 동일한 실행결과를 보장하지만
           JVM은 운영체제에 종속적이다.

        ※ 자바프로그램을 운영체제가 이해하는 기계어로 번역해서 실행해야 하므로
           JVM은 운영체제에 맞게 설치되어야 한다.
           ▶ 제어판\시스템 및 보안\시스템 
              ▷ "시스템 -> 시스템 종류" 에서 본인컴퓨터의 운영체제를 확인할 수 있다.

        ※ JVM은 JDK 또는 JRE를 설치하면 자동으로 설치된다.
           JDK와 JRE가 운영체제별로 제공된다.

_________________________________________________________________________________________________

C:\Program Files\Java 들어가보면
▶ 2가지가 있다.

   > jdk1.8.0_311
   > jre1.8.0_311
_________________________________________________________________________________________________


[ Java SE 구현체 ]

▶ JDK : 자바 개발 키트 → 프로그램 개발에 필요한 자바가상기계(JVM), 라이브러리 API, 컴파일러 등의  ▷ "개발 도구"   
▶ JRE : 자바 실행 환경 → 프로그램 실행에 필요한 자바가상기계(JVM), 라이브러리 API                ▷ "실행"

▶▶ JDK = JRE + 개발에 필요한 도구
▶▶ JRE = JVM + 표준 클래스 라이브러리

_______________________________________________


[ 구조 ]

어플리케이션 | JDK(컴파일러-하드디스크에 있음) (자바소스 컴파일하려면 JDK가 메모리에 올라와야한다.)(JVM이 없으면, 컴파일은 되나 자바코드가 실행이 안된다.)
(OS를 제외한 메모리 공간)
---------------------------------------------------------------------------------------
OS(운영체제=오퍼레이팅시스템)   <- 통신 ->   JVM(자바가상머신) (※ JRE(자바실행환경)안에 JVM이 들어있다.)
---------------------------------------------------------------------------------------
하드웨어(H/W)


_________________________________________________________________________________________________

꿀팁!
로컬디스크(C:) 에 가서 보면

▷ Program Files
▷ Program Files (x86)

두가지가 무슨 차이냐면
뒤에 (x86)이 붙은건 32비트
그냥 Program Files는 64비트

Program Files 는 64비트용 SW가 설치되는 폴더
Program Files (x86) 32비트 SW가 설치되면 생성되는 폴더
_________________________________________________________________________________________________


[ 기능들을 클래스에 담아뒀다. >> "src.zip" ]

  ▶ lang 랭(기본) 위치
     C:\Program Files\Java\jdk1.8.0_311 >> "src.zip" >> java
     "lang" 기본이고,
     >> 맨 상단에 import 안써도됨.


   ▶ lang랭(기본)에 없으면 
      맨 상단에 import 뒤에 클래스의 위치를 적어줘야 한다. 

      ex) import java.util.Scanner;
          ▶ Scanner이라는건 lang폴더에 없는 기본이 아니기 때문에 파일위치로 보면
             C:\Program Files\Java\jdk1.8.0_311 >> "src.zip" >> java >> "util" 폴더 안에 ▶ "Scanner.java" 가 있다.
             그래서 해당파일 주소를 적는것이다.
             ▶▶ java.util.Scanner; (앞에 import 붙힌다.)
             ▶▶ import 문은 다른 모듈에서 내보낸 바인딩을 가져올 때 사용합니다.

          ▷ Scanner 쓰고 ▶▶ "ctrl + space바" 누르면 어디 위치에 있는 클래스인지 나온다. 확인하고 엔터! 하면 import 나옴!
             참고 : Day3 > Ex08Char입력


   ※ 참고자료 : Day3 > Ex10 문자변환
      ex) 
      import java.util.Scanner;

      public class Ex10문자변환 {
          public static void main(String[] args) {

              Scanner scan = new Scanner(System.in);

              System.out.print("문자열 입력 : ");

              String str = scan.nextLine(); 
              str = str.toUpperCase();


      ▶ 코드 정밀분석!

         import java.util.Scanner; ▷ Scanner 라는 클래스가 lang(기본)에 없기때문에 Scanner 클래스가 위치한 폴더의 주소를 적어준다. (상단에 입력!)

         -----------------------------------------------------------------------------------------------
     
         Scanner scan = new Scanner(System.in);
         ▶ Scanner 랭lang(기본)에 없기 때문에 상단에 import를 쓴다. 
            Scanner 쓰고 ▶▶ "ctrl + space바" 누르면 어디 위치에 있는 클래스인지 나온다. 확인하고 엔터! 하면 상단에 import 자동 나옴!

         ▶ new : 메모리 할당연산자이다. 입력할 수 있게 해주려고, new를 쓰는것임. 
                  뭘 쓸진 몰라도 메모리에 올려야 하기 때문에 new를 쓴다.	

         ▶ (System.in) : 표준입력장치(키보드)이다. 아래서 nextLine() 입력이 있기 때문 ex)바코드찍는것

         ▶ = 앞뒤로 Scanner를 쓴것은 데이터 형식이 같다는것을 나타내기 위해 쓴것임

         ▶ scan은 참조형 변수다.
            scan이라는 변수가 가르키는것은 ▷ nextInt() / nextDouble() / nextLine() ...

         -----------------------------------------------------------------------------------------------

		   String str = scan.nextLine();	
         ▶ nextLine() 한줄입력 ｜ next() 여러줄 ｜ nextInt() 정수를 입력받는 함수
         ▷ scan. >> 상단에 new Scanner(System.in) 이걸 가르킴
            .nextLine() >> 한줄을입력받아 호출받는다. (이게 있기에 입력할 수 있는것임)
            이 내용을 str변수에 담았다.

         ▷  String str (String → 클래스타입) 
             String 뒤에 붙은 str 해당 변수가 기본형인지 참조형인지 따진다.
             ▷ str은 참조형이다.
             ▷ 참고자료 : 006.Java학습\000.선행학습 >> 001-2.Java기초
         
         -----------------------------------------------------------------------------------------------

         str = str.toUpperCase();
         ▶ toUpperCase() 대문자 입력 
            (대문자입력처럼 변환하는것은 : 메모리번지가 바뀌기 떄문에 다시 변수를 선언해줘야함) >> str = 이렇게 말이다.

_________________________________________________________________________


[ 산술연산자 ] 

  + : 더하기
  - : 빼기
  * : 곱하기
  / : 나눗셈의 몫
  % : 나눗셈의 나머지

  5/3 = 1
  5%3 = 2

  거듭제곱 연산자가 없다.
  ▶ Math.pow(3,2) -> 거듭제곱(함수) >> 3의 2승

_________________________________________________________________________


[ 비교(관계) 연산자 ]

  > : 크다
  < : 작다
  >= : 크거나 같다.
  <= : 작거나 같다.
  == : 같다
  != : 같지않다

  ▶ nand : and의반대
  ▶ nor : or의반대

_________________________________________________________________________


[ 논리연산자 ]

  && : 모두 and (그리고) ▶ 모두가 트루가 나야 트루!
  || : 또는 or (둘중에 하나) ▶ 둘중에 하나만 트루나도 트루!(하나만 속해도됨)
  ! : Not 

  ex) 
  System.out.println(3 > 4 && 3 < 4); 
  ▷ false (처음이 거짓이면, 걍 뒤에가 진실이어도 거짓)

  < 계산처리 하는 순서를 보면 >
  3+4 == 5  && 3>4
  ▶ 산술먼저하고, 비교한 다음, 논리연산 순으로 비교한다.

_________________________________________________________________________


[ 증감연산자 ]

  ++ : 1씩 증가
  -- : 1씩 증감

  ex)
  int a = 10;
  ++a;
  System.out.println(a); ▶ 11나옴
  --a;
  --a;
  System.out.println(a); ▶ 9나옴

_________________________________________________________________________


[ 삼항 연산자 (조건 연산자) ]

  ▶ 조건식? 값1 : 값2
  ▶ 조건식? 식1 : 식2

  => 조건식이 true면 값1 / false면 값2
     ex) 비? 집 : 놀이동산


  두개의 정수를 입력받아,
  둘 중 더 큰수를 판단하여 출력할 수도 있다.
  참고자료 : Day3 > Ex12 조건연산자

_________________________________________________________________________


[ 비트연산 ]
  : 정수연산만 가능하다.

  ▶▶ << 은 2의 거듭제곱을 곱하기
  ▶▶ >> 은 2의 거듭제곱을 나누기

  --------------------------------------------------

  ex)
  int x = 10;
  ▷ 10진수로 "10"은 → 2진수로 보면 "1010"이다.

  x >>= 1;  (두개가 같은거임)  x = x >> 1;
  ▶▶ x를 오른쪽으로 1만큼(1비트) 움직여줘라.
  ▷ 10인 1010이 맨끝에 있는 0이 앞으로 이동하면, 0101이다. 이것을 10진수로 보면 "5"다.
     00001010 -> 00000101
  System.out.println(x); ▷ 10÷2 = 5 (출력해서 보면 x가 5가 나온것을 볼 수 있다.)

  x >>= 1;
  ▶▶ x를 오른쪽으로 1만큼(1비트) 움직여줘라.
  System.out.println(x); // 5÷2 = 2
  00001010 -> 00000101 -> 00000010


  x <<= 2;
  ▶▶ 왼쪽으로 2비트 움직여줘라.
  System.out.println(x); // 2*2*2=8
  00000010 -> 00001000

  --------------------------------------------------

  ※ 정리를 하면
     ▶ 3 << 3은 ▶▶ 3 × 2의 3승 = "24" 
        왼쪽으로 3칸(3비트)을 이동한다. 
        └ 1칸은 2의 1승 / 2칸은 2의 2승 / 3칸은 2의 3승이니 ▷ 1비트는 0과1인 두가지 경우(2진수) 1bit = 2개
        └ 여기서는 3칸을 이동하니 2의 3승 = 2 × 2 × 2 = 8
        └ 3에다가 2의 3승인 8을 곱해서 
        └ ▶▶ 최종적으로, 3 × 8 = "24"

     ▶ 24 >> 2는 ▶▶ 24 ÷ 2의 2승 = "6"
        오른쪽으로 2칸(2비트) 이동한다.
        └ 2칸이니 2의 2승 = 2 × 2 = 4
        └ 24에다가 2의 2승인 4를 나눠서
        └ ▶▶ 최종적으로, 24 ÷ 4 = "6"

_________________________________________________________________________





