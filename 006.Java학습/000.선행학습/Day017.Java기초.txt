[ Java 기초 ｜ 2021.11.26 ]

[ 객체 지향 프로그래밍 (OOP : Object Oriented Programming) ]
  : 부품에 해당되는 객체들을 먼저 만들고, 
    하나씩 조립해서 완성된 소프트웨어를 만드는 기법

    완성품인 객체를 모델링하고 집합 관계에 있는 부품 객체와 
    사용 관계에 있는 객체들을 하나씩 설계 후 조립하는 방식으로 프로그램을 개발한다.

________________________________________________________________________________________________________________________

[ 객체 (Object) ]
  : 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 
    자신의 속성을 가지고 있고,
    다른 것과 식별 가능한 것 (자동차, 자전거, 책 등 ...)

    객체는 속성과 동작으로 구성되어 있다.
    (사람 : 이름, 나이, 걷다, 웃다 .. / 자동차 : 색상, 모델명, 가속, 브레이크, ... )

    자바에서는 이런 속성과 동작을 각각
    ▶ 필드(속성) , 메소드(동작) 로 부른다.


    < 소프트웨어 객체 모델링 > 

    ─────────────────────────────────────                  ─────────────────────────────────────────────
    │             현실 세계              │                  │                 자바                       │
    ─────────────────────────────────────                  ─────────────────────────────────────────────
    │                                    │                 │                                            │
    │    ────────────────────────────    │                 │              사람 객체                      │
    │    │          사람             │  -------------------▶        ───────────────────                 │
    │    ────────────────────────────    │                 │        ＼       웃다      ／   (메소드)      │
    │    │    [속성] : 이름, 나이     │   │                 │          ─────────────────                  │
    │    │    [동작] : 웃다, 먹다     │   │   소프트웨어     │          │      이름      │                 │
    │    ────────────────────────────    │   객체 모델링    │          │      나이      │    (필드)       │
    │                                    │                 │          │     (필드)     │                 │  
    │    ────────────────────────────    │                 │          ─────────────────                  │
    │    │          자동차           │   │                  │         ／      먹다      ＼   (메소드)      │
    │    ────────────────────────────    │                 │         ───────────────────                 │
    │    │    [속성] : 색깔, 속도     │   │                 │                                             │
    │    │   [동작] : 가속, 브레이크  │  -------------------▶              자동차 객체                    │
    │    ────────────────────────────    │                 │          ───────────────────                │
    │                                    │                 │          ＼      가속      ／   (메소드)     │
    ─────────────────────────────────────                  │           ─────────────────                 │
                                                           │           │      색깔      │                │
                                                           │           │      속도      │    (필드)      │
                                                           │           │     (필드)     │                │
                                                           │           ─────────────────                 │
                                                           │          ／    브레이크     ＼   (메소드)     │
                                                           │           ───────────────────               │      
                                                           ───────────────────────────────────────────────


   -----------------------------------------------------------------------------------------------------------------


   [ 객체 모델링 ]
     : 현실 세계의 객체를 소프트웨어 객체로 설계한다.
       현실 세계 객체의 속성과 동작을 추려내어 소프트웨어 객체의 필드와 메소드로 정의하는 과정이다.


   [ 객체의 상호작용 ]
     : 현실 세계의 모든 현상은 객체와 객체간의 상호작용으로 이루어져 있다.
       (사람 : 더하기 기능 사용, 계산기 : 더하기 기능의 결과 반환)

       소프트웨어에서도 객체들은 각각 독립적으로 존재하고, 객체간 메소드를 통해 상호작용한다.
       객체가 다른 객체의 기능을 이용하는 것이 메소드 호출이다.


       < 객체의 메소드 호출을 이용한 상호작용 >
         
              사람 객체                                         계산기 객체
         ────────────────────        메소드 호출           ────────────────────
         ＼      웃다       ／  ----------------------▶   ＼      더하기      ／
           ─────────────────            더하기               ─────────────────
           │     이름       │                                │     제작       │
           │     나이       │                                │     회사       │
           ─────────────────           결과 반환             ─────────────────
         ／     먹는다       ＼  ◀----------------------   ／                 ＼
         ────────────────────                              ────────────────────


   -----------------------------------------------------------------------------------------------------------------

   [ 메소드 호출 형태 ]
     : 객체 도트(.) 연산자를 붙이고 메소드 이름을 기술한다.
       도트 연산자는 객체의 필드나 메소드에 접근할 때 사용한다.
   
       반환값 = 객체.메소드(매개값1, 매개값2, ... )

       int result = Calculator.add(10, 20);  // 반환할 값을 result 변수에 저장

          Person                                         Calculator
       ─────────────      Calculator.add(10,20)        ───────────────
       │           │   ---------------------------▶   │    add()     │
       │           │          int result = 30          │              │
       │           │   ◀---------------------------   │              │
       ─────────────                                    ───────────────