[ Java 기초 ｜ 2021.11.03  ]

  JAVA RUNTIME Environment
  - 자바 실행 환경

  Java Virtual Machine
  - 자바 가상 머신

_______________________________________________

C:\Program Files\Java 들어가보면
▶ 2가지가 있다.

> jdk1.8.0_311
> jre1.8.0_311

▶ Jdk : 컴파일러(0,1로 변환)
▶ Jre : 자바실행환경

_______________________________________________


[ 구조 ]

어플리케이션 | Jdk(컴파일러-하드디스크에 있음) (자바소스 컴파일하려면 jdk가 메모리에 올라와야한다.)(JVM이 없으면, 컴파일은 되나 자바코드가 실행이 안된다.)
(OS를 제외한 메모리 공간)
---------------------------------------------------------------------------------------
OS(운영체제=오퍼레이팅시스템)   <- 통신 ->   JVM(자바가상머신) (※ Jre(자바실행환경)안에 JVM이 들어있다.)
---------------------------------------------------------------------------------------
하드웨어(H/W)


_________________________________________________________________________________________________


[ 기능들을 클래스에 담아뒀다. >> "src.zip" ]

  ▶ lang 랭(기본) 위치
     C:\Program Files\Java\jdk1.8.0_311 >> "src.zip"
     "lang" 기본이고,
     >> 맨 상단에 import 안써도됨.


   ▶ lang랭(기본)에 없으면 
      맨 상단에 import 뒤에 클래스의 위치를 적어줘야 한다. 
      ex) import java.util.Scanner;
          ▷ Scanner 쓰고 ▶▶ "ctrl + space바" 누르면 어디 위치에 있는 클래스인지 나온다. 확인하고 엔터! 하면 import 나옴!
             참고 : Day3 > Ex08Char입력


   ※ 참고자료 : Day3 > Ex10 문자변환
      ex) 
      import java.util.Scanner;
      public class Ex10문자변환 {
          public static void main(String[] args) {
              Scanner scan = new Scanner(System.in);
              System.out.print("문자열 입력 : ");
              String str = scan.nextLine();


      ▶ 코드 정밀분석!

         import java.util.Scanner; ▷ Scanner 라는 클래스가 lang(기본)에 없기때문에 Scanner 클래스가 위치한 폴더의 주소를 적어준다. (상단에 입력!)

         -----------------------------------------------------------------------------------------------
     
         Scanner scan = new Scanner(System.in);
         ▶ Scanner 랭lang(기본)에 없기 때문에 상단에 import를 쓴다.
            Scanner 쓰고 ▶▶ "ctrl + space바" 누르면 어디 위치에 있는 클래스인지 나온다. 확인하고 엔터! 하면 상단에 import 자동 나옴!

         ▶ new : 메모리 할당연산자이다. 입력할 수 있게 해주려고, new를 쓰는것임. 
                  뭘 쓸진 몰라도 메모리에 올려야 하기 때문에 new를 쓴다.	

         ▶ (System.in) : 표준입력장치(키보드)이다. 아래서 nextLine() 입력이 있기 때문 ex)바코드찍는것

         ▶ = 앞뒤로 Scanner를 쓴것은 데이터 형식이 같다는것을 나타내기 위해 쓴것임

         -----------------------------------------------------------------------------------------------

		 String str = scan.nextLine();	
         ▶ nextLine() 한줄입력 ｜ next() 여러줄 ｜ nextInt() 정수를 입력받는 함수
         
_________________________________________________________________________


[ 산술연산자 ] 

  + : 더하기
  - : 빼기
  * : 곱하기
  / : 나눗셈의 몫
  % : 나눗셈의 나머지

  5/3 = 1
  5%3 = 2

  거듭제곱 연산자가 없다.
  ▶ Math.pow(3,2) -> 거듭제곱(함수) >> 3의 2승

_________________________________________________________________________


[ 비교(관계) 연산자 ]

  > : 크다
  < : 작다
  >= : 크거나 같다.
  <= : 작거나 같다.
  == : 같다
  != : 같지않다

  ▶ nand : and의반대
  ▶ nor : or의반대

_________________________________________________________________________


[ 논리연산자 ]

  && : 모두 and (그리고) ▶ 모두가 트루가 나야 트루!
  || : 또는 or (둘중에 하나) ▶ 둘중에 하나만 트루나도 트루!(하나만 속해도됨)
  ! : Not 


  < 계산처리 하는 순서를 보면 >
  3+4 == 5  && 3>4
  ▶ 산술먼저하고, 비교한 다음, 논리연산 순으로 비교한다.

_________________________________________________________________________


[ 증감연산자 ]

  ++ : 1씩 증가
  -- : 1씩 증감

  ex)
  int a = 10;
  ++a;
  System.out.println(a); ▶ 11나옴
  --a;
  --a;
  System.out.println(a); ▶ 9나옴

_________________________________________________________________________


[ 삼항 연산자 (조건 연산자) ]

  ▶ 조건식? 값1 : 값2
  ▶ 조건식? 식1 : 식2

  => 조건식이 true면 값1 / false면 값2
     ex) 비? 집 : 놀이동산


  두개의 정수를 입력받아,
  둘 중 더 큰수를 판단하여 출력할 수도 있다.
  참고자료 : Day3 > Ex12 조건연산자

_________________________________________________________________________


[ 비트연산 ]
  : 정수연산만 가능하다.

  ex)
  int x = 10;
  ▷ 10진수로 "10"은 → 2진수로 보면 "1010"이다.

  x >>= 1;  (두개가 같은거임)  x = x >> 1;
  ▶▶ x를 오른쪽으로 1만큼(1비트) 움직여줘라.
  ▷ 10인 1010이 맨끝에 있는 0이 앞으로 이동하면, 0101이다. 이것을 10진수로 보면 "5"다.
     00001010 -> 00000101
  System.out.println(x); ▷ 10÷2 = 5 (출력해서 보면 x가 5가 나온것을 볼 수 있다.)

  x >>= 1;
  ▶▶ x를 오른쪽으로 1만큼(1비트) 움직여줘라.
  System.out.println(x); // 5÷2 = 2
  00001010 -> 00000101 -> 00000010


  x <<= 2;
  ▶▶ 왼쪽으로 2비트 움직여줘라.
  System.out.println(x); // 2*2*2=8
  00000010 -> 00001000
