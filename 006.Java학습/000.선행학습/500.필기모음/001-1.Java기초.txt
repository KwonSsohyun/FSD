[ Java 기초 ｜ 2021.11.01 ]

  : 변수, 상수, 함수, 클래스 ..
    연산자 

  ▶ 제어문 
     ▷ 조건문 : if, switch .. (삼항 조건 연산자)
     ▷ 반복문 : for, while, do ~ while, 확장 for ..

_________________________________________________________________________


[ 따옴표의 의미 ]

 100 ▶ 숫자열 (따옴표 안쌈)
 ' ' ▶ 단일문자 (한글자)
 " " ▶ 문자열

_________________________________________________________________________


[ 가장 자주 사용되는 Data type ]
  : 자바에서는 맞는 데이터타입을 잡아줘야한다.
  ----------------------------------------------------------------

  ▶ 숫자 
     ▷ int : 정수 타입 (정수만 기입 가능)
              ex) 3.14 쓰면 컴파일러 에러 (소숫점 불가)

     ▶ double : 실수 타입 (정수허용 == 큰타입임!!!)
                 ex) double x = 3;  →  x에 3.0이 들어간것과 같다.

  ----------------------------------------------------------------
      
  ▶ 문자
     ▷ char : 단일문자
               ex) char ch = 'A';

     ▶ String : 문자열 (큰타입임!!!)
                 ex) String str = "abc";
     
_________________________________________________________________________


[ 컴퓨터의 처리 ]

  컴퓨터 2진수 처리
  컴퓨터가 이해하는 언어는 "0과 1" ▶ 2가지뿐이다.
  ▶ "bit" 라는 것.


  하지만, 하나의 비트로는 0,1 과 단둘이 표현을 못하기 때문에
  더 큰 수를 표현하기 위해서 
  8개의 bit를 묶어서 
  ▶ "1byte" 라는 개념으로 정의.
  ▷ 왜 8bit냐면 최초 널리 퍼지게된 컴퓨터가 8bit라서.


  ▶▶ 컴퓨터가 데이터를 저장하는 최소단위가 "byte" 이다!
       → 여기에 우리가 원하는 데이터를 넣을 수 있고,
         아날로그 데이터들을 디지털로 변환할 수 있다.
  
  ▶▶ 1byte = 8bit = 2의 8승 = 0~255(256개) 까지의 데이터를 저장할 수 있다. 

_________________________________________________________________________


[ 아스키코드(ASCII) ]
  
  큰수를 표현하게 되었다고 하더라도, 결국 숫자라는 사실에는 변함이 없다.
  다시 한번 말하지만, 컴퓨터는 0과 1 이외는 아무것도 인식할 수 없다.
  그렇다면 컴퓨터는 어떻게 문자를 입력받고 출력할 수 있게 되는걸까?

  ▶ 아스키코드 (ASCII)
     : 아스키코드테이블을 보면
       0~127까지 표현할 수 있다.
       즉 1byte 내에서 모든걸 표현할 수 있다. 

       7bit 인코딩과 / 33개의 출력 불가능한 제어 문자들과 / 공백을 포함한 95개의 출력 가능한 문자들로 구성되어
       총 128개로 이뤄진다.


       # 출력가능한 문자들
         ○ 영문 알파벳 대+소 문자 ▶ "52개" (65~90, 97~122)
         ○ 숫자 ▶ "10개" (48~57) 
         ○ 특수문자 ▶ "32개" (33~47, 58~64, 91~96, 123~126)
         ○ 공백문자 ▶ "1개" (32)
    
       # 출력 불가능한 문자들
         ○ 제어문자 ▶ "33개" (0~31, 127)

      -----------------------------------------------------------------------------------------

       ※ 하지만,
          한국어, 일본어, 중국어 복잡한 언어들은 모음과 자음이 분리된 언어들은 
          1byte로는 표현할 수 없다.
          그래서 전세계 언어들을 표현할 수 있는 인코딩 테이블 
          즉 아스키코드 보다 더 확장된 테이블이 "유니코드"
          
      -----------------------------------------------------------------------------------------

  ▷ 문자를 입력하면, 그 문자는 숫자로 컴퓨터에게 전달이 되고,
     컴퓨터는 전달된 숫자의 아스키코드의 테이블을 뒤져서 해당하는 문자를 그려주게 된다.

     ex) a를 입력하면 >> 01100001  
         컴퓨터에는 다음과 같은 신호가 전달된다.
         (전압의 차이를 나타낸것일뿐 전류가 끊어진것은 아님)
         ▷ 이렇게 표현된 전압은 비트로 표현해보면 이와 같이 표현이 된다. (01100001)
         
         바로 소문자 a의 아스키코드값인 
         ▷ 97(10진수 DEC) == 0x61(16진수 HEX)
            ※ 0x는 16진수를 나타내는 약속

         ▷ 이렇게 변환된 디지털신호는 데이터버스를 통해
            여러분의 컴퓨터로 전달

            컴퓨터는 이렇게 입력된 디지털신호를
            문자로 출력할지, 숫자로 출력할지 프로그래머 요청에 따라 처리한다.

            프로그래머가 문자로 출력을 원할때는 
            아스키 코드의 97을 찾아서 a라는 문자를 그려주게 된다.

            ▶ 숫자 또한 아스키코드에 문자테이블에 줄때 
               문자와 숫자가 같이 혼합되어 있는 곳에
               이 문자 테이블이 쓰인다.

               ex) 서울특별시 중구 명동 110
                   → 주소에 문자와 숫자가 혼합되어 있는 경우

    --------------------------------------------------------------------

    예제)
      숫자를 문자로 변환할 수 있다면
      문자 또한 숫자로 변환가능

      65(10 Dec) | 41(16 Hex) | A(Char)      97(10 Dec) | 61(16 Hex) | a(Char)

      ▶ a - 32 = 65
         계산하면 대문자 'A'가 나온다.
         a는 97이니까 
         97-32=65

      ▶ printf("a-32 = %c (%d)\n", 'a'-32, 'a'-32)  ▷ %c 문자(A출력) / %d 정수(65출력) / \n 개행
      ▶▶ a - 32 = A (65)  ▷ 출력


      문자를 숫자로 바꿀때 예제
      ▶ printf("'1' - '0' = %d\n", '1' - '0');
      ▶▶ '1' - '0' = 1  ▷ 출력

  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


  ▷ 아스키코드는 8bit가 아닌 7bit만 사용되는데
     나머지 1bit는 통신에러 검출을 위해서 사용되어진다.

     ※ 일반적으로는 ASCII 7bit 사용
        ASCII-8(8bit)도 있다. 앞에 0을 붙혀놓은것. 에러검출을 위해서이다.
        ASCII-8을 쓰는 이유는 상업용컴퓨터가 8bit여서 이다.
        송신측 -> 수신측 이렇게 통신을 하면 7bit가 아닌
        "ASCII-8(8bit)" 써야한다.

    --------------------------------------------------------------------

     1bit는 Parity bit라고 해서 7개의 비트 중 
     1의 개수가 홀수면 1,
               짝수면 0 으로 나타내어 주기 때문에
     통신정보가 도중에 변질된 것을 수신 측에서 알아낼 확룰을 높이도록 하기 위해서 쓰임.

    --------------------------------------------------------------------

     ex) 
     송신측 -> 수신측
     : 통신규약(프로토콜)을 정하기 나름
       1의 갯수를 ▷ 홀수 할건지 / 짝수 할건지


       송신측
       01000010 → 1이 2개 (짝수)
       1000011 → 1이 3개 (홀수) ▷ 11000011 (앞에 1을 붙혀서 → 1의갯수 짝수로 해야 오류가 안남.)
       
       ▶ 해당 케이스에서는 짝수로 하기로 정했으니,
          바로 위 1이 3개(홀수)는 오류!
          이렇게 앞에 붙히니 8자리인 8bit가 된다. "ASCII-8(8bit)"

       ▷ 송신측 -> 수신측 이렇게 통신을 하면 7bit가 아닌
          "ASCII-8(8bit)" 써야한다.


  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


