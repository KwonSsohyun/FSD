[ Java 기초 ｜ 2021.11.24 ]

[ 열거 타입 ]
 
  열거 : 한정된 값만을 갖는 데이터 타입으로 몇 개의 열거 상수 중에서 하나의 상수를 저장하는 데이터 타입이다.
         예)
         요일(열거 타입 이름) : 월, 화, 수, 목, 금, 토, 일 (열거 상수)
         계절(열거 타입 이름) : 봄, 여름, 가을, 겨울 (열거 상수)

________________________________________________________________________________________________________________________


[ 열거 타입 선언 ]
  
  : 열거 타입을 선언하기 위해서는 열거 타입의 이름을 정하고, 
    열거 타입 이름으로 소스파일(.java)를 생성해야 한다.


    열거 타입 이름은 관례적으로 첫 문자를 대문자, 나머지는 소문자로 구성한다.
    ex) Week.java
        MemberGrade.java
        ProductKind.java


    소스파일의 내용으로 열거 타입 선언이 온다.
    ▶ public enum 열거타입이름 { 열거 상수1, 열거 상수2, ... }

    ▷ public enum : 열거 타입 선언을 위한 키워드 (반드시 소문자!!!)
    ▷ 열거 타입 이름은 소스 파일명과 대소문자가 모두 일치해야 한다.
    ▷ 열거 상수는 열거 타입의 값으로 사용되며 모두 대문자로 작성한다. 
    ▷ 열거 상수가 여러 단어로 구성될 경우 단어 사이를 밑줄 _ 로 연결하는 것이 관례이다.


    << 이클립스에서 열거 타입 enum 생성 >>
       Package Explorer 뷰에서 프로젝트 선택 후, [File -> new -> Enum] 을 선택한다.
       

    ex)
    public enum LoginResult {LOGIN_SUCCESS, LOGIN_FAILED}

    ex)
    public enum Week {MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY}

    ────────────────────────────────────
                 Week.java
    ────────────────────────────────────   
      public enum Week {
        MONDAY,
        TUESDAY,
        WEDNESDAY,
        THURSDAY,
        FRIDAY,
        SATURDAY,
        SUNDAY
      }
    ────────────────────────────────────   

________________________________________________________________________________________________________________________


[ 열거 타입 변수 ]
   
  : 열거 타입을 선언했다면, 열거 타입을 사용할 수 있다.
    열거 타입도 하나의 데이터 타입이므로 변수를 선언하고 사용해야 한다.

  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

  << 열거 타입 변수 선언 방법 >>

     ▶▶ 열거타입 변수;

          ＃ 하는 법 예시 
             1) 이클립스에서 [File -> new -> Enum] 선택
                창이 뜨는데

                · Source folder : test/src
                · Package       : test
                ──────────────────────────────
                · Name          : Week

                ▶ 이클립스에서 열거 타입 enum 생성하기

             2) ▶ 열거타입을 선언했다면, 열거타입을 사용 할 수 있다.
                   다만, 열거타입도 하나의 데이터 타입이므로, 변수를 선언하고 사용해야 한다.
                   ▷▷ 열거타입 변수;

                ▷ Week today;
                ▷ Week reservationDay;
                
  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


  << 열거 상수 저장 >>

     : 열거 타입 변수를 선언했다면, 열거 상수를 저장할 수 있다.
       열거 상수는 단독으로 사용할 수 없고, 
       반드시 "열거타입.열거상수" 로 사용된다.    

       -----------------------------------------------------------------------------------

       ▶▶ 열거타입 변수 = 열거타입.열거상수;

            ex) 
            Week today = Week.SUNDAY;   // today 열거 변수에 → 열거 상수 SUNDAY 저장

       -----------------------------------------------------------------------------------

       ▶▶ 열거 타입 변수는 null 값을 저장할 수 있다. (열거 타입도 참조 타입이기 때문!)
            
            ex)
            Week birthday = null;

       -----------------------------------------------------------------------------------

       ▶▶ 참조 타입 변수는 객체를 참조하는 변수이므로, 
            열거 상수 또한 열거 타입 변수가 참조하므로 객체가 된다.

            즉, 열거 상수는 열거 객체로 생성된다.


            ex) 
                열거타입 Week 의 경우 MONDAY 부터 SUNDAY 까지 열거 상수는 총 7개의 Week 객체로 생성된다.
                이후 메소드 영역에 생성된 열거 상수가 해당 Week 객체를 각각 참조한다.


                < 열거 타입이 메모리에 생성되는 방식 >

                  ──────────────────────────────────               ────────────────────────────────────────────
                  │           메소드 영역           │               │                  힙 영역                  │
                  ──────────────────────────────────               ────────────────────────────────────────────
                  │                                │               │                                          │
                  │    Week.class                  │               │               Week 객체          ┐       │
                  │    ────────────────────────    │               │          ───────────────────     │       │
                  │    │     MONDAY     │     │ -------- 참조 --------▶      │      MONDAY      │    │        │
                  │    ────────────────────────    │               │          ───────────────────     │       │
                  │    │       ...      │     │    │               │                  ...             ├ 7개   │
                  │    ────────────────────────    │               │                Week 객체         │       │
                  │    │     SUNDAY     │     │ -------- 참조 --------▶       ───────────────────    │       │
                  │    ────────────────────────    │               │          │      SUNDAY      │    │       │
                  │                                │               │           ───────────────────    ┘       │
                  │                                │               │                                          │
                  ──────────────────────────────────               ────────────────────────────────────────────

       --------------------------------------------------------------------------------------------------------

            ex) 
                Week today = Week.SUNDAY;
                열거타입 변수 = 열거타입.열거상수;

                ▷ 열거 타입 변수 today 는 스택 영역에 생성된다.
                   today에 저장되는 값은 Week.SUNDAY 열거 상수가 참조하는 객체의 번지이다.
                   따라서 Week.SUNDAY 와 today 변수는 서로 같은 Week 객체를 참조하게 된다.


                   < 메소드 영역의 열거상수가 참조하는 객체와 / 스택 영역의 열거변수가 참조하는 객체는 동일 >

                     ──────────────────────────                ─────────────────────────────────
                     │       메소드 영역       │                │            힙 영역             │   
                     ──────────────────────────                ─────────────────────────────────
                     │                        │                │                                │
                     │   ──────────────────   │                │           Week 객체            │  
                     │   │   SUNDAY   │   │ -------- 참조 --------▶   ────────────────────     │
                     │   ──────────────────   │                │      │                   │    │
                     │                        │                │      │      SUNDAY       │    │
                     ──────────────────────────                │      │                   │    │
                                        ↓                      │      ────────────────────     │  
                                    주소 복사                   │                               │
                                        ↓                       ─────────────────────────────────  
                     ──────────────────────────               
                     │        스택 영역        │                
                     ──────────────────────────
                     │                        │
                     │   ──────────────────   │
                     │   │   today   │    │ -------- 참조 --------↗
                     │   ──────────────────   │
                     │                        │
                     ────────────────────────── 


                [ 코드 풀이 ]
                  ▶ today == Week.SUNDAY   // true 출력
                     
                     따라서 같은 번지수 값을 가지므로 == 연산자는 true 가 출력된다. 

                     Week week1 = Week.SATURDAY;
                     Week week2 = Week.SATURDAY;
                     System.out.println( week1 == week2 );  // true 출력

________________________________________________________________________________________________________________________


[ 열거 객체의 메소드 ]

  : 열거 객체는 열거 상수의 문자열을 내부 데이터로 가지고 있다.
    열거 객체가 가지는 데이터 및 메소드는 아래 그림과 같다.

     ─────────────────────────────────────────────────────────────
     │                        힙 영역                             │
     ─────────────────────────────────────────────────────────────
     │                                                           │
     │                       열거 객체                            │
     │               ─────────────────────────                   │
     │               ＼      compareTo()     ／                  │
     │        ────────────────────────────────────────           │   
     │                 │                     │                   │
     │     ordinal()   │       열거 상수      │   value()         │
     │                 │        문자열        │                   │
     │                 │                     │                    │
     │     ─────────────────────────────────────────────────      │
     │        name()   ／                     ＼  valueOf()       │
     │                 ─────────────────────────                  │
     │                                                            │
     ─────────────────────────────────────────────────────────────


     ---------------------------------------------------------------------------------------------------------


     ▷ 아래 메소드는 java.lang.Enum 클래스에 선언된 메소드이며
        모든 열거 타입은 컴파일 시에 Enum 클래스를 상속하도록 되어 있어 모든 열거 객체에서 사용할 수 있다.

        ─────────────────────────────────────────────────────────────────────────────────────────────────────
        │      반환 타입      │         메소드 (매개 변수)         │                 내용                      │
        ─────────────────────────────────────────────────────────────────────────────────────────────────────
        │       String       │              name()               │   열거 객체의 문자열 반환                  │
        ─────────────────────────────────────────────────────────────────────────────────────────────────────
        │        int         │             ordinal()             │   열거 객체의 순번 (0부터 시작) 을 반환     │
        ─────────────────────────────────────────────────────────────────────────────────────────────────────
        │        int         │            compareTo()            │   열거 객체를 비교해서 순번 차이를 반환     │
        ─────────────────────────────────────────────────────────────────────────────────────────────────────
        │      열거 타입      │       valueOf( String name )      │   주어진 문자열의 열거 객체를 반환         │
        ─────────────────────────────────────────────────────────────────────────────────────────────────────
        │      열거 배열      │              values()             │   모든 열거 객체들을 배열로 반환           │
        ─────────────────────────────────────────────────────────────────────────────────────────────────────

        ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

        ▶ name() 메소드 
           : 열거 객체가 가지고 있는 문자열을 반환한다.
             반환되는 문자열은 열거 타입을 정의할 때 사용한 상수 이름과 동일하게 반환된다.

             Week today = Week.SUNDAY;
             ▷ String name = today.name();

             ▷ today 열거 타입 변수가 참조하는 열거 객체에서 name() 메소드를 호출해서 문자열을 얻어낸다.
                name() 메소드는 열거 객체 내부인 문자열인 "SUNDAY"를 반환하고 name 변수에 저장한다.

        ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

        ▶ ordinal() 메소드
           : 전체 열거 객체 중 몇 번째 열거 객체인지 알려준다. (순서 번호 반환)
             열거 타입을 정의할 때 주어진 순번 (0 부터 시작)

             ▷ 즉, Week의 열거 객체 순번은 MONDAY (0) 부터 SUNDAY (6) 까지 정의 된다.

                Week today = Week.SUNDAY;
             ▷ int ordinal = today.ordinal();  // 6이 저장된다.

        ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

        ▶ compareTo() 메소드
           : 매개 값으로 주어진 열거 객체를 기준으로 전후로 몇 번째 위치하는 지를 비교한다. (상대적 위치 반환)
             만약 열거 객체가 매개값의 열거 객체보다 순번이 빠르다면 음수, 순번이 늦는다면 양수가 반환된다.

                Week day1 = Week.MONDAY;
                Week day2 = Week.WEDNESDAY;

             ▷ int result1 = day1.compareTo(day2);  // day1 : MONDAY(0) < day2 : WEDNESDAY(2)  ▶ -2
                int result2 = day2.compareTo(day1);  // day2 : WEDNESDAY(2) > day1 : MONDAY(0)  ▶ 2

        ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        
        ▶ valueOf() 메소드
           : 매개값으로 주어지는 문자열과 동일한 문자열을 가지는 열거 객체를 반환한다.
             외부로 부터 문자열을 입력받아 열거 객체로 변환할 때 유용하게 쓰인다.

                Week weekDay = Week.valueOf("SATURDAY");
             ▷ weekDay 열거 타입 변수는 Week.SATURDAY 열거 객체를 참조하게 된다.

        ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

        ▶ values() 메소드 
           : 열거 타입의 모든 열거 객체들을 배열로 만들어서 반환한다.

               ------------------------------------------------------------------------------

                Week[] days = Week.values();  // Week 열거 타입의 모든 열거 객체를 배열로 만듬

                for(Week day : days) {        // 배열 내용 출력

                    System.out.println(day);
                }
               
               ------------------------------------------------------------------------------

               ▷ Week 배열(변수 days)은 아래와 같이 생성된다.

               < 열거 객체를 가진 배열로 변환된다. 여기서 배열도 객체이므로 힙 영역에 생성된다. >
                  
                 ───────────────────────────                     ──────────────────────────────────────────────────────
                 │        스택 영역         │                    │                      힙 영역                         │
                 ───────────────────────────                     ──────────────────────────────────────────────────────
                 │                         │                    │                                                      │
                 │   ────────────────────  │                    │         0     1     2     3     4     5     6        │
                 │   │    days    │     │ --------- 참조 ---------▶    ──────────────────────────────────────────     │
                 │   ────────────────────  │                    │      │     │     │     │     │     │     │     │     │ 
                 │                         │                    │       ──────────────────────────────────────────     │
                 ───────────────────────────                    │         │      ＼    ＼    │     ／    ／    │        │
                                                                │         ▼                  ▼                ▼        │
                                                                │    ────────────                       ────────────   │
                                                                │    │  MONDAY  │        . . .          │  SUNDAY  │   │
                                                                │    ────────────                       ────────────   │
                                                                │                                                      │
                                                                 ──────────────────────────────────────────────────────


                                                                 