[ Java 기초 ｜ 2021.11.19 ]

[ 필드란? ]
   : 필드(field)란 클래스를 구성하는 요소 중 하나로 클래스 내부 멤버이다.
     어떠한 데이터를 저장하기 위한 역할을 담당하며 클래스 내부의 생성자와 메서드 밖에 정의 된다.
     필드는 클래스에서 내부 멤버이기 때문에 "멤버변수(member variable)" 라고 불리며,
     클래스 내 전역에서 사용하기 때문에 "전역변수" 라고도 불리며,
     데이터를 저장하기 위한 역할을 담당하며 생성자와 메서드 밖에서 사용한다.
     즉 필드란 클래스 안에서 독립적으로 선언되는 변수를 뜻한다.

      ─────────────────────── 클래스 ───────────────────────
      │                      필드 선언                      │
      │                                                    │
      │             ────────── 메서드 ─────────            │        
      │             │      지역 변수 선언       │           │
      │             ────────────────────────────           │
      │             ────────── 생성자 ─────────             │        
      │             │      지역 변수 선언       │            │
      │             ────────────────────────────            │
      ───────────────────────────────────────────────────────




[ 필드 특징 ]
  : 필드의 경우 다른 지역변수들과 다르게 초기화를 하기 않아도 기본값이 자동으로 초기화 된다는 특징이 있다.
    필드로 선언해 클래스를 사용할 때 편하게 정보를 변경할 수 있다.

    그리고, 해당 클래스 내의 모든 메서드에 접근이 가능하다.
    생성의 경우 객체가 생성될때 함께 생성되며, 생성된 객체를 더 이상 참조하지 않을 때 
    가비지 컬렉터(Garbage Collector)에 의해 제거된다.

    필드를 선언할 때는 
    ▶ 접근 지정자, ▶ 필드 타입, ▶ 필드 이름 
    3가지를 정해줘야 한다.
    
    접근 지정자에는 
    ▶ public  : 모든 클래스로 부터 접근 가능
    ▶ private : 클래스 내부에서만 접근 가능하며, 이 외에는 접근이 불가능 하다.

       ex) < 목적에 따른 추가 방법 >
           public class 클래스이름 {
	             public static int a;  // 접근제한자 + 정적 + 자료형 + 변수명 + ;필드선언
            }


            < 초기값을 주지 않은 경우 >
            public class 클래스이름 {
	              int a;  // 필드선언
	          }


            < 초기값을 주는 경우 > 
            public class 클래스이름 {
	              int a=10;  // 필드선언
	          }


    ───────────────────────  < 필드타입종류 >  ───────────────────────
                분류	          데이터 타입	          초기값
    ─────────────────────────────────────────────────────────────────
              정수타입	           byte	                0
                                  char	          \u0000(빈 공백)
                                  short	               0
                                   int	               0
                                   long	               oL
    ─────────────────────────────────────────────────────────────────
              실수타입	           float	             0.0F
                                  double	             0.0
    ─────────────────────────────────────────────────────────────────
              논리타입	           boolean	           false
    ─────────────────────────────────────────────────────────────────
              참조타입	             배열
                             클래스 (String 포함)       null
                                   인터페이스
    ─────────────────────────────────────────────────────────────────




[ 필드 선언 ]
  : 필드 선언은 중괄호 블록 어디서든 존재할 수 있다.
    생성자 선언과 메서드 선언의 앞,뒤 어디서든 필드 선언이 가능하다.
    하지만 생성자와 메서드 중괄호 블록 내부에서는 선언될 수 없으며, 
    생성자와 메서드 중괄호 내부에 선언된 것은 모두 로컬변수(지역변수)로 필드라고 하지 않는다.

    ex) 
        public class Car() {

	          //필드
	          int speed;

	          //생성자
	          Car() {
 		            speed = 0;
	          }

	          //메서드
	          void method( ... ) {
		            speed = 10;
	          }
        }



[ 필드 접근 방법 ]
  : 필드에 접근하기 위한 방법은 다양하다.
    클래스를 이용해 새로운 객체를 만들어 객체 내의 필드를 사용하기 위해서는 아래와 같은 방식을 사용한다.

  -------------------------------------------------------------------------------------------------------------------------

    class human {
      int kg;
      int cm;
    }

    public class example {
      public static void main(String[] args){

          human hu1 = new human();
          // human 객체를 생성
          // human이라는 클래스의 객체를 사용하는 예이다.
        
          hu1.kg=70;
          hu1.cm=170;
          // hu1의 kg과 cm이라는 필드에 값을 넣음
          // 위와 같은 human 클래스가 있을 때 새로운 객체를 생성해 사용하기 위해서는 '객체명.필드명' 형태를 갖추어야 한다.
      }
    }

  -------------------------------------------------------------------------------------------------------------------------

    class human {
      int kg;
      int cm;

      public void example(){
          int kg=100;
          // 메서드 내의 지역변수
      
          this.kg=70;
          // 필드 변수 사용
          // this.변수명 ▶ 필드변수 사용법
      }
      public static void main(String[] args){
          example();
      }
    }

    ▶ 다음과 같이 작성 시 
       example 내의 kg은 100이라는 숫자가 들어가고 
       human의 kg은 70이라는 값이 나오게 된다.

       또한 클래스 내부 메서드에서 필드 변수를 사용가능하다. 
       하지만 메서드 내의 지역변수와 필드 변수의 변수명이 같을 시 메서드 내의 지역변수를 우선순위로 하며, 
       만약 필드를 사용하고 싶다면 변수명 앞에 'this.'를 사용한다면 필드 변수를 사용할 수 있다.




[ 필드 사용 ]

  public class Car() {

	    // 필드
	    int speed;

	    // 생성자
	    Car() {
 		    speed = 0;
	    }

	    // 메서드
	    void method( ... ) {
		    speed = 10;
	    }
  }

  void method() {

	    // Car 객체 생성
	    Car myCar = new Car();
	
      // 필드 사용
	    myCar.speed = 60;
  }

  ▶ 예시로 만든 클래스인 Car 클래스에서
     생성자와 메서드에서 필드의 값을 변경 하듯이 클래스 내부에서는 값 변경이 가능하다.
     
  ▶ 또한 클래스로부터 객체를 생성하고 
     필드를 사용해 객체에 소속된 데이터를 수정하듯이 필드의 데이터 값을 변경할 수 있다.

     변수는 자신이 선언된 생성자 또는 메서드 블록 내부에서만 사용할 수 있는 반면,
     필드는 생성자와 모든 메서드에서 사용이 가능하다.

     ▷ 외부 Person 클래스에서 
        Car 클래스의 speed 필드값을 사용하려면
        우선적으로 Car 객체를 생성해야하며,
        myCar 변수가 Car 객체를 참조하게 되면,
        도트(.) 연산자로 speed 필드에 접근할 수 있다.

        도트 연산자는 객체 접근 연산자로 객체가 가지고 있는 필드, 메서드를 사용하고자 할 때 사용된다.



※ 참고자료 
   : http://wiki.hash.kr/index.php/%ED%95%84%EB%93%9C_(%EC%9E%90%EB%B0%94)
